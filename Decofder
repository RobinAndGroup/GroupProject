import java.lang.*;
public class Decrypter
{

   // Encryption method
   // Assign each letter to a 3 digit code (trinary)
   // Move every other number to the end (starting with first)
   // Move every third number to the end (starting with first)
   // Take new combination of numbers to make encrypted message
   
   // Decryption method
   // Take each letter, assign to 3 digit combination
   // 

   public static void main(String[] args)
   {
      String unShuffled = decryptMessage("S YSHVDFKTTRLC");
      // System.out.println(unShuffled);
      // String decrypted = numberToLetter(unShuffled);
      System.out.println("decrypted message: " + unShuffled);
      // switch e and r, t and y, u and i, o and p, a and s, d and f, h and n
      
   }
   public static String decryptMessage(String message)
   {
      String stringEncrypted = message;
      String letterToNumber = "";
      String next = "";
      String decryption = "";
      for (int i = 0; i < message.length(); i++)
      {
         
         if (stringEncrypted.charAt(i) == 'M')
         {
         next="000";
         }
         else if (stringEncrypted.charAt(i)=='Y')
         {
         next="001";
         }
         else if (stringEncrypted.charAt(i)=='G')
         {
         next="002";
         }
         else if (stringEncrypted.charAt(i)=='I')
         {
         next="010";
         }

         else if (stringEncrypted.charAt(i)=='R'){
                     next="011";
         }
         else if (stringEncrypted.charAt(i)=='L'){
                     next="012";
         }
         else if (stringEncrypted.charAt(i)=='W'){
                     next="020";
         }
         else if (stringEncrypted.charAt(i)=='O'){
                     next="021";
         }
         else if (stringEncrypted.charAt(i)=='V'){
                     next="022";
         }
         else if (stringEncrypted.charAt(i)=='E'){
                     next="100";
         }
         else if (stringEncrypted.charAt(i)=='S'){
                     next="101";
         }
         else if (stringEncrypted.charAt(i)=='X'){
                     next="102";
         }
         else if (stringEncrypted.charAt(i)=='D'){
                     next="110";
         }
         else if (stringEncrypted.charAt(i)=='Z'){
                     next="111";
         }
         else if (stringEncrypted.charAt(i)=='N'){
                     next="112";
         }
         else if (stringEncrypted.charAt(i)=='P'){
                     next="120";
         }
         else if (stringEncrypted.charAt(i)=='A'){
                     next="121";
         }
         else if (stringEncrypted.charAt(i)=='J'){
                     next="122";
         }
         else if (stringEncrypted.charAt(i)=='C'){
                     next="200";
         }
         else if (stringEncrypted.charAt(i)=='K'){
                     next="201";
         }
         else if (stringEncrypted.charAt(i)=='T'){
                     next="202";
         }
         else if (stringEncrypted.charAt(i)=='B'){
                     next="210";
         }
         else if (stringEncrypted.charAt(i)=='F'){
                     next="211";
         }
         else if (stringEncrypted.charAt(i)=='H'){
                     next="212";
         }
         else if (stringEncrypted.charAt(i)=='Q'){
                     next="220";
         }
         else if (stringEncrypted.charAt(i)=='U'){
                     next="221";
         }
         else if (stringEncrypted.charAt(i)==' '){
                     next="222";
         }
         letterToNumber = letterToNumber + next;
      }
      // encrypted message into trinary numbers
      letterToNumber = letterToNumber;
      
      
      // process moving characters from end back into order
      // System.out.println(letterToNumber);
      decryption = unShuffle(letterToNumber, 4);
      // System.out.println("unShuffled once: " + decryption);
      decryption = unShuffle(decryption, 3);
      // System.out.println("unShuffled twice: " + decryption);
      decryption = unShuffle(decryption, 2);
      // System.out.println("unShuffled three times: " + decryption);
      decryption = numberToLetter(decryption);
      // System.out.println("unshuffled code to letters: " + decryption);
      return decryption;
   }
   public static String unShuffle(String message, int bound)
   {
      String finalString = "";
      String firstPart;
      String secondPart;
      int repeatAmount = (message.length() + (bound - 1)) / bound;
      String newMessage = message;
      int a = bound-1;
      
      // split into 2 substrings, first part and rearranged part
      // take 1 from rearranged part, take 3 from first part
      // put into new string
      
      firstPart = newMessage.substring(0, message.length() - repeatAmount);
      secondPart = newMessage.substring(message.length() - repeatAmount, message.length());
      
      for (int x = 0; x < repeatAmount; x++)
      {
         String normal = "";
         String move = "";
         if((x*a)+a < firstPart.length())
         {
            normal = firstPart.substring(x*a, (x*a)+a);
         }
         else 
         {
            normal = firstPart.substring(x*a);
         }
         // System.out.println(normal);
         if (x + 1 > secondPart.length())
         {
            move = secondPart.substring(x);
         }
         else 
         {
            move = secondPart.substring(x, x+1);
         }
         // System.out.println("This is move: " + move);
         String string = move + normal;
         finalString = finalString + string;
      }
      // System.out.println("string after a shuffle: " + finalString);
      return finalString;
      // 120100202012110
   }
   public static String numberToLetter(String message)
   {
      String Encode2 = "";
      for (int i = 0; i < message.length(); i += 3) 
      {
         // System.out.println(Encode2);
         String M = ""+ message.charAt(i) + message.charAt(i + 1) + message.charAt(i + 2);
         // System.out.println(M);
         if (M.equals("000")) {
            Encode2 += 'M';
         }
         else if(M.equals("001")) {
            Encode2 += 'Y';
         }
         else if(M.equals("002")) {
            Encode2 += 'G';
         }
         else if(M.equals("010")) {
            Encode2 += 'I';
         }
         else if(M.equals("011")) {
            Encode2 += 'R';
         }
         else if(M.equals("012")) {
            Encode2 += 'L';
         }
         else if(M.equals("020")) {
            Encode2 += 'W';
         }
         else if(M.equals("021")) {
            Encode2 += 'O';
         }
         else if(M.equals("022")) {
            Encode2 += 'V';
         }
         else if(M.equals("100")) {
             Encode2 += 'E';
                 }
         else if(M.equals("101")) {
             Encode2 += 'S';
                 }
         else if(M.equals("102")) {
             Encode2 += 'X';
                 }
         else if(M.equals("110")) {
             Encode2 += 'D';
                 }
         else if(M.equals("111")) {
             Encode2 += 'Z';
                 }
         else if(M.equals("112")) {
             Encode2 += 'N';
                 }
         else if(M.equals("120")) {
             Encode2 += 'P';
                 }
         else if(M.equals("121")) {
             Encode2 += 'A';
                 }
         else if(M.equals("122")) {
             Encode2 += 'J';
                 }
         else if(M.equals("200")) {
             Encode2 += 'C';
                 }
         else if(M.equals("201")) {
             Encode2 += 'K';
                 }
         else if(M.equals("202")) {
             Encode2 += 'T';
                 }
         else if(M.equals("210")) {
             Encode2 += 'B';
                 }
         else if(M.equals("211")) {
             Encode2 += 'F';
                 }
         else if(M.equals("212")) {
             Encode2 += 'H';
         }
         else if(M.equals("220")) {
            Encode2 += 'Q';
         }
         else if(M.equals("221")) {
            Encode2 += 'U';
         }
         else if(M.equals("222")) {
            Encode2 += ' ';
         }
         i++;
         i--;
      }
   return Encode2;
   }
}
